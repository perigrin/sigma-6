.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::local::lib::helper 3"
.TH App::local::lib::helper 3 "2011-09-12" "perl v5.14.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::local::lib::helper \- Make it easy to run code against a local\-lib
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Installing and using the helper (common usage)
.PP
.Vb 2
\&    cpanm \-\-local\-lib ~/mylib App::local::lib::helper
\&    ~/mylib/bin/localenv bash
.Ve
.PP
Customizing the helper creation (advanced use only)
.PP
.Vb 2
\&    use App::local::lib::helper;
\&    App::local::lib::helper\->run(%opts);
.Ve
.PP
Note, if you don't have \f(CW\*(C`cpanm\*(C'\fR already installed you can use the web service
version like so instead for all examples:
.PP
.Vb 1
\&    curl \-L http://cpanmin.us/ | perl \- \-\-local\-lib ~/mylib App::local::lib::helper
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an object which provide the functionality to create a local::lib
\&'helper' script in either the currently loaded local::lib environment or in
a target directory of choice.  By default the script is called \f(CW\*(C`localenv\*(C'\fR and
can be used to invoke a command under the local::lib which it was built
against.  For example, assume you build a local::lib like so:
.PP
.Vb 1
\&    cpanm \-\-local\-lib ~/mylib App::local::lib::helper
.Ve
.PP
Note what is happening.  First, you are telling cpanminus to install everything
to a local::lib directory called \f(CW\*(C`~/mylib\*(C'\fR (cpanminus behind the scenes uses
local::lib to do this for you) then you are telling cpanminus to install the
distribution App::local::lib::helper into that created local::lib directory.
When the \f(CW\*(C`Makefile.PL\*(C'\fR script for App::local::lib::helper runs, it notices
the fact that it is being asked to install into a locally lib managed directory
and will additionally generate a helper script into \f(CW\*(C`~/mylib/bin\*(C'\fR called \f(CW\*(C`localenv\*(C'\fR.
.PP
Now, if you want to invoke a perl application and use libs installed into 
\&\f(CW\*(C`~/mylib\*(C'\fR, you can do so like:
.PP
.Vb 1
\&    ~/mylib/bin/localenv perl [SOME COMMAND]
.Ve
.PP
The command \f(CW\*(C`localenv\*(C'\fR will make sure the same local::lib that was active
when App::local::lib::helper was originally installed is again installed
into the environment before executing the commands passed in \f(CW@ARGV\fR.  Upon
completing the command, the \f(CW%ENV\fR is restored so that you can use this to fire
off an application against a specific local::lib without needing to deal
with the details of how to activate the local::lib or how to make sure
your \f(CW%ENV\fR stays clean.
.PP
The arguments given to \f(CW\*(C`localenv\*(C'\fR don't need to be a perl application.  For
example, I often like to open a sub shell under a particular local::lib
managed directory.
.PP
.Vb 1
\&    ~/mylib/bin/localenv bash
.Ve
.PP
Now, if I do:
.PP
.Vb 1
\&    perl \-V
.Ve
.PP
I'll see that i\f(CW\*(C`~/mylib\*(C'\fR has been added to \f(CW@INC\fR.  Additionally, \f(CW\*(C`~/mylib/bin\*(C'\fR will
have been added to \f(CW$PATH\fR, so that any command line perl applications installed
into the local::lib (such as \f(CW\*(C`ack\*(C'\fR or \f(CW\*(C`cpanm\*(C'\fR) can be accessed easily.
.PP
Another example usage would be when you want to install an application from
\&\s-1CPAN\s0, install it and all its dependencies to a single directory root and 
then run it without a lot of effort.  For example:
.PP
.Vb 2
\&    cpanm \-\-local\-lib ~/gitalyst\-libs Gitalist App::local::lib::helper
\&    ~/gitalyst\-libs/bin/localenv gitalyst\-server.pl
.Ve
.PP
And presto! Your cpan installed application is running, fully self-contained to
one root directory all under regular user privileges.
.PP
local::lib does all the real work, but I find this to be the easiest way to
run given code against a local::lib root.
.SS "Additional Helpers"
.IX Subsection "Additional Helpers"
In addition to the \f(CW\*(C`localenv\*(C'\fR script which is documented above, we also create
two snippets of code suitable for including in your \f(CW\*(C`.bashrc\*(C'\fR or \f(CW\*(C`.cshrc\*(C'\fR.
These are created to help people that only want or need a single local lib and
would like to activate it at login.  If you'd like to use these, simple add the
following tot he end of your \f(CW\*(C`.bashrc\*(C'\fR
.PP
.Vb 1
\&    source $TARGET/bin/localenv\-bashrc
.Ve
.PP
Where \f(CW$TARGET\fR is the root of your local lib (the directory that contains your
\&\f(CW\*(C`bin\*(C'\fR and \f(CW\*(C`lib\*(C'\fR directories created when you ran the helper).
.PP
Next time you log in, you can do \f(CW\*(C`perl \-V\*(C'\fR and should see that your local-lib
has automatically been activated.
.PP
There will also be a \f(CW\*(C`source $TARGET/bin/localenv\-cshrc\*(C'\fR created for those of
you using csh.  Currently this is not going to work with Windows shell users,
but should be easy to setup, collaborations very welcomed.
.SH "OPTIONS"
.IX Header "OPTIONS"
This class supports the following options.
.IP "which_perl" 4
.IX Item "which_perl"
This should be the path to the perl binary that the local::lib is built
against. This defaults to the path of the perl binary under which we are
currently running.  You should probably leave this one alone :)
.IP "target" 4
.IX Item "target"
This is the target directory for the local::lib you want to build the helper
script against.  By default it will attempt to detect the currently running
local::lib and use that.  If we can't detect a running local::lib and
this option is undef, we die with a message.
.IP "helper_name" 4
.IX Item "helper_name"
This is the name of the helper utility script.  It defaults to 'localenv'.
.IP "helper_permissions" 4
.IX Item "helper_permissions"
These are the permissions the the helper utility script is set to.  By default
we set the equivilent of 'chmod 755 [\s-1HELPER\s0 \s-1SCRIPT\s0]'
.SH "HELPERS"
.IX Header "HELPERS"
This distribution installs the following local::lib helpers
.SS "localenv"
.IX Subsection "localenv"
This is a perl script that runs a single command in local::lib aware context.
You can use the \f(CW\*(C`helper\-name\*(C'\fR option to set a different name.
.PP
Typically I will use this to 'enable' a previously setup local::lib with
commands like:
.PP
.Vb 2
\&    ~/mylocallib/bin/localenv bash
\&    ~/mylocallib/bin/localenv screen
.Ve
.PP
Or I can use it to run a single command wrapped in the local::lib target
and exit cleanly:
.PP
.Vb 2
\&    ~/mylocallib/bin/localenv perl app.pl
\&    ~/mylocallib/bin/localenv plackup app.psgi
.Ve
.SS "localenv-relative"
.IX Subsection "localenv-relative"
\&\s-1NOTE:\s0 Experimental feature.  Please prefer using \*(L"localenv\*(R" unless you 
absolutely need this functionality.
.PP
This perl script functions (or should function) identically to localenv as
documented.  However, instead of having hardcoded full paths to your Perl
binary and local::lib target directories, we instead try to use relative
pathing.  For example, here is the helper script built on my server for the
standard \*(L"localenv\*(R" script:
.PP
.Vb 1
\&    #!/Users/johnn/perl5/perlbrew/perls/perl\-5.14.1/bin/perl
\&
\&    use strict;
\&    use warnings;
\&
\&    use lib \*(Aq/Users/johnn/locallib_5_14_1/lib/perl5\*(Aq;
\&    use local::lib \*(Aq/Users/johnn/locallib_5_14_1\*(Aq;
\&
\&    unless ( caller ) {
\&        if ( @ARGV ) {
\&            exec @ARGV;
\&        }
\&    }
.Ve
.PP
And here is the example same version for the relative script:
.PP
.Vb 1
\&    #!/usr/bin/env perl
\&
\&    use strict;
\&    use warnings;
\&
\&    use FindBin;
\&    use File::Spec;
\&    use lib File::Spec\->catdir($FindBin::Bin, \*(Aq..\*(Aq, \*(Aqlib\*(Aq, \*(Aqperl5\*(Aq);
\&    use local::lib File::Spec\->catdir($FindBin::Bin, \*(Aq..\*(Aq);
\&
\&    unless ( caller ) {
\&        if ( @ARGV ) {
\&            exec @ARGV;
\&        }
\&    }
.Ve
.PP
The goal here is to be more friendly when you need to relocate your
installation of Perl and/or your local::lib target directory.  You might
wish to try this if you are copying a 'seed' Perl and local::lib setup to
multiple developer home directories (as a way to speed up first time developer
setup, for example) or if your deployment system copies your application from
your build enviroment to a \s-1QA\s0 or Production that is not identical.
.PP
Personally I prefer to build Perl and my application in each location that is
different, since I find that works very effectively.  However I understand some
shops have existing build systems that deploy code by copying Perl dependencies
from box to box, and these boxes are not always identical in directory layout.
For example, there might be a build or integration point in development, with
a local::lib target of \f(CW\*(C`/home/integration/webapp\-cpan\-locallib\*(C'\fR and you
wish to copy that directory recursively to your qa/production server, which 
might be located at \f(CW\*(C`/home/qa/local\-lib\*(C'\fR.
.PP
I'd like to accomodate this approach as best I can, however I can't be certain
that moving Perl and local::lib around rather than performing a true install
is going to work consistently. Caveat emptor!
.PP
Please also note that the following shell snippets are not relative tested.
.SS "localenv-bashrc"
.IX Subsection "localenv-bashrc"
a snippet suitable for sourcing in your .bashrc, which will automatically
activate a local-lib at login.  Name will follow from \f(CW\*(C`helper\-name\*(C'\fR.
.PP
Here's an example of the line I might add to .bashrc (assumes you have setup
local::lib in \f(CW\*(C`$HOME/mylocal\*(C'\fR
.PP
.Vb 1
\&    source $HOME/mylocal/localenv\-bashrc
.Ve
.PP
Then next time you open a shell you should see that \f(CW$PATH\fR and \f(CW\*(C`PERL5LIB\*(C'\fR
have been properly changed.
.SS "localenv-cshrc"
.IX Subsection "localenv-cshrc"
a snippet suitable for sourcing in your .cshrc, which will automatically
activate a local-lib at login.  Name will follow from \f(CW\*(C`helper\-name\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
John Napiorkowski \f(CW\*(C` <<jjnapiork@cpan.org\*(C'\fR> >
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2011, John Napiorkowski
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
