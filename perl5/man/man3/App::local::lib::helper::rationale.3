.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "App::local::lib::helper::rationale 3"
.TH App::local::lib::helper::rationale 3 "2011-09-09" "perl v5.14.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::local::lib::helper::rationale \- Why write this?
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A quick review of why I wrote this application and what problem it solves for
me (and possible you.)
.SH "DISCUSSION"
.IX Header "DISCUSSION"
This document is intended to give futher details and examples of the type of
problem I hade which caused me to write this application.  For more technical
details you should also review the brief documentation written at 
App::local::lib::helper or simply review the source code since there's not a
lot of it :)
.PP
Generally speaking, I think local::lib is awesome.  It deals very concisely
with the age old problem of how to best manage Perl dependecies installed from
\&\s-1CPAN\s0.  Using local::lib you can easily create a user level \s-1CPAN\s0 library root
directory and install all your application dependencies into it.  This way when 
you need a new \s-1CPAN\s0 module you don't need root access or to work with an
administrator, nor do you worry about how your new \s-1CPAN\s0 modules might cause
trouble for other users of Perl on a shared server.  local::lib clarifies 
and simplifies your development and deployment workflow.  If you are not
convinced you should review the local::lib documentation first.
.PP
However there are two questions that users of local::lib have to answer.  One
(which is not going to be dealt with here) is \*(L"What is the best practice for
locating and naming my locally lib managed directories?\*(R" For the purposes of
the remaining discussion I will usually describe such a directory as being
created under the user \*(L"home\*(R" directory (\f(CW$HOME\fR or \f(CW\*(C`~\*(C'\fR on Unix like machines)
however I know some people prefer to create a 'extlib' directory within the root
of the application that the local::lib is being created for.  No sides on 
this question will be currently taken.
.PP
The second question, the one which this application was written as a possible
answer to, is "How do I easily enable or disable Perl recognition of a particular
local::lib?"  To answer this lets step back and review how Perl searches for
\&\s-1CPAN\s0 installed dependencies.
.PP
The Perl binary, when you install it, will automatically create a set of 
directories that are used as a sort of \*(L"path\*(R" to search for dependencies.
You can see yours by typing \f(CW\*(C`perl \-V\*(C'\fR from the command line.  Here's what I see
when I do so on my terminal:
.PP
.Vb 1
\&  $ perl \-V
\&
\&    [EXTENSIVE OUTPUT SNIPPED]
\&
\&  @INC:
\&    /Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/5.10.1/darwin\-thread\-multi\-2level
\&    /Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/5.10.1
\&    /Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/site_perl/5.10.1/darwin\-thread\-multi\-2level
\&    /Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/site_perl/5.10.1
.Ve
.PP
Your default search path (or \f(CW@INC\fR) is typically installed into a global area on
your machine, or as in the case above, when using perlbrew, into a central area
in your \f(CW$HOME\fR directory.  You can also see this by dumping \f(CW@INC\fR and \f(CW$ENV{PATH}\fR:
.PP
.Vb 1
\&    $ perl \-e \*(Aquse Data::Dumper; warn Dumper @INC, split(":",$ENV{PATH})\*(Aq
\& 
\&    $VAR1 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/5.10.1/darwin\-thread\-multi\-2level\*(Aq;
\&    $VAR2 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/5.10.1\*(Aq;
\&    $VAR3 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/site_perl/5.10.1/darwin\-thread\-multi\-2level\*(Aq;
\&    $VAR4 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/site_perl/5.10.1\*(Aq;
\&    $VAR5 = \*(Aq.\*(Aq;
\&    $VAR6 = \*(Aq/Users/johnn/perl5/perlbrew/bin\*(Aq;
\&    $VAR7 = \*(Aq/Users/johnn/perl5/perlbrew/perls/current/bin\*(Aq;
\&    $VAR8 = \*(Aq/usr/bin\*(Aq;
\&    $VAR9 = \*(Aq/bin\*(Aq;
\&    $VAR10 = \*(Aq/usr/sbin\*(Aq;
\&    $VAR11 = \*(Aq/sbin\*(Aq;
\&    $VAR12 = \*(Aq/usr/local/bin\*(Aq;
\&    $VAR13 = \*(Aq/usr/local/git/bin\*(Aq;
\&    $VAR14 = \*(Aq/usr/X11/bin\*(Aq;
\&    $VAR15 = \*(Aq/opt/local/bin\*(Aq;
\&    $VAR16 = \*(Aq/opt/local/sbin\*(Aq;
.Ve
.PP
Note the directory \f(CW\*(C`/Users/johnn/perl5/perlbrew/perls/current/bin\*(C'\fR is in \f(CW$PATH\fR
This is so that any command line utilities installed by \s-1CPAN\s0 (such as App::Ack)
will be easy to find and not require you to type in the full path to that tool.
.PP
Now, when you create a local::lib, Perl has no way to automatically detect
it.  Perhaps it would be cool if a future version of Perl could notice the
presence of a local::lib and add it automatically, but that's not today.  As
of now you need to tell Perl to modify \f(CW@INC\fR and \f(CW$PATH\fR in such a way as that it
can use your locally lib installed dependencies.
.PP
The documentation for local::lib recommends adding a bit of code to your 
\&\f(CW\*(C`.bashrc\*(C'\fR script (assuming you are on a Unixlike system.)  This works well if
you only have a single local::lib setup, however if you are like me and
you create a new local::lib per application this is not going to work very
well.  You need a way to 'flip' a local::lib on and off as you move from
one project to another.  Additionally, for the purposes of deployment, you may
wish for something that requires less setup.
.PP
One option is to manually 'activate' a particular local lib for each perl
command you run.
.PP
.Vb 1
\&    perl \-I ~/mylib/lib/perl5 \-Mlocal::lib=~/mylib [COMMAND]
.Ve
.PP
You can see it work like so:
.PP
.Vb 10
\&    $ perl \-I ~/mylib/lib/perl5/ \-Mlocal::lib=~/mylib/ \-e \*(Aquse Data::Dumper; warn Dumper @INC, split(":",$ENV{PATH})\*(Aq
\&    $VAR1 = \*(Aq/Users/johnn/mylib/lib/perl5/darwin\-thread\-multi\-2level\*(Aq;
\&    $VAR2 = \*(Aq/Users/johnn/mylib/lib/perl5\*(Aq;
\&    $VAR5 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/5.10.1/darwin\-thread\-multi\-2level\*(Aq;
\&    $VAR6 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/5.10.1\*(Aq;
\&    $VAR7 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/site_perl/5.10.1/darwin\-thread\-multi\-2level\*(Aq;
\&    $VAR8 = \*(Aq/Users/johnn/perl5/perlbrew/perls/perl\-5.10.1/lib/site_perl/5.10.1\*(Aq;
\&    $VAR9 = \*(Aq.\*(Aq;
\&    $VAR10 = \*(Aq/Users/johnn/mylib/bin\*(Aq;
\&    $VAR11 = \*(Aq/Users/johnn/perl5/perlbrew/bin\*(Aq;
\&    $VAR12 = \*(Aq/Users/johnn/perl5/perlbrew/perls/current/bin\*(Aq;
\&    $VAR13 = \*(Aq/usr/bin\*(Aq;
\&    $VAR14 = \*(Aq/bin\*(Aq;
\&    $VAR15 = \*(Aq/usr/sbin\*(Aq;
\&    $VAR16 = \*(Aq/sbin\*(Aq;
\&    $VAR17 = \*(Aq/usr/local/bin\*(Aq;
\&    $VAR18 = \*(Aq/usr/local/git/bin\*(Aq;
\&    $VAR19 = \*(Aq/usr/X11/bin\*(Aq;
\&    $VAR20 = \*(Aq/opt/local/bin\*(Aq;
\&    $VAR21 = \*(Aq/opt/local/sbin\*(Aq;
.Ve
.PP
As you can see, the local lib is now added to \f(CW@INC\fR and \f(CW$PATH\fR has been altered.
Additionally, a few other perl \f(CW%ENV\fR settings are created so that \s-1CPAN\s0 knows
where to install dependencies.
.PP
This is a workable option for deployment, since you are probably scripting that
and have limited interactivity needs.  However it is onerous for developers.
.PP
Making it easier for developers is the basic reason for being for this
application.  The created helper script wraps the above effort into a single
and hopefully short command.  Additionally, its not limited to Perl commands.
So you can use it like:
.PP
.Vb 1
\&    ~/mylib/bin/localenv bash
.Ve
.PP
And spawn off a subshell where your \f(CW@INC\fR, \f(CW$PATH\fR and other important bits have
been properly setup.  You can then exit the shell when you need to cancel the
alterations.  Or you can just use the command like
.PP
.Vb 1
\&    ~/mylib/bin/localenv perl \-V
.Ve
.PP
And you get the expected output.  I personally find this easier but your results
may differ.  Feedback and thoughts regarding improvements very welcomed.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The following are some example usage for this application
.SS "Setting up a development environment"
.IX Subsection "Setting up a development environment"
Let's say you clone some application down from <http://github.com> and you are going to
start development.  You will need to setup a local::lib of that applications
dependencies as part of your job.  You can do so like (from the directory that
contains the application \f(CW\*(C`Makefile.PL\*(C'\fR)
.PP
.Vb 1
\&    curl \-L http://cpanmin.us | perl \- \-\-local\-lib ~/mylib App::local::lib::helper .
.Ve
.PP
and then you can use the bash trick from above to flip on your local lib
environment:
.PP
.Vb 1
\&    ~/mylib/bin/localenv bash
.Ve
.PP
and then you can start working, running code, or even adding to the dependency
list.
.SS "Installing / Deploying an application"
.IX Subsection "Installing / Deploying an application"
Say you want to install an application from \s-1CPAN\s0 and just run it on a shared
server.  Let's assume you have very little or no control beyond your \f(CW$HOME\fR
directory.
.PP
.Vb 1
\&    curl \-L http://cpanmin.us | perl \- \-\-local\-lib ~/mygitalist Gitalist App::local::lib::helper
.Ve
.PP
Here we are running cpanminus directly off the web, installing Gitalist, a
Catalyst based git web front end, and setting up a local lib helper for it.
.PP
We can then startup Gitalist:
.PP
.Vb 1
\&    ~/mygitalist/bin/localenv gitalist_server.pl \-\-repo_dir $REPO
.Ve
.PP
Hopefully this eases some of your deployment issues!
.SS "Using in an applicatin or module Makefile.PL"
.IX Subsection "Using in an applicatin or module Makefile.PL"
If you add this as a requirement to your \f(CW\*(C`Makefile.PL\*(C'\fR and it is installed into
a \f(CW\*(C`local::lib\*(C'\fR the helper will automatically be added.
.PP
Example \f(CW\*(C`Makefile.PL\*(C'\fR
.PP
.Vb 1
\&    #!/usr/bin/env perl
\&
\&    use strict;
\&    use warnings FATAL => \*(Aqall\*(Aq;
\&    use inc::Module::Install;
\&
\&    requires \*(AqApp::local::lib::helper\*(Aq;
\&    ## rest of your file
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
See App::local::lib::helper for Authorship information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See App::local::lib::helper for Copyright and Licensing information.
